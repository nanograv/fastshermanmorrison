name: Python package CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel cython
          pip install black
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Build Cython extensions
        run: python setup.py build_ext --inplace
      - name: Lint with black
        run: |
          black . --check
      - name: Run tests with pytest
        run: |
          # Add your testing command/script here
          pytest
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true


  build:
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install build dependencies
        run: python -m pip install --upgrade pip setuptools wheel cython cibuildwheel==2.3.1
      - name: Build wheels using cibuildwheel
        run: cibuildwheel --output-dir wheelhouse
        env:
          # If you need to build on a specific platform like macOS, set the CIBW_PLATFORM environment variable
          # CIBW_PLATFORM: "macos"
          CIBW_BUILD_VERBOSITY: 1
          CIBW_SKIP: "pp* cp27-* cp35-* cp36-* cp37-*"
      - name: Build source distribution
        run: python setup.py sdist
      - uses: actions/upload-artifact@v3
        with:
          name: dist
          path: |
            ./wheelhouse/*.whl
            ./dist/*.tar.gz


  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release' #&& github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Download built distributions
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist
      - name: Publish to PyPI
        run: |
          python -m pip install --upgrade twine
          twine upload dist/*
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}







